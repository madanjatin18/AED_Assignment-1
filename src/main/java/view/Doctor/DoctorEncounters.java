/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.Doctor;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Doctor;
import models.Encounter;
import models.VitalSigns;
import resources.Validations;
import view.MainJFrame;

/**
 *
 * @author madan
 */
public class DoctorEncounters extends javax.swing.JFrame {

    /**
     * Creates new form DoctorJFrame
     */
    
    Validations validations;
    Vector originalTableModel;
    Date date;
    SimpleDateFormat formatter;
    Boolean valid;
    public DoctorEncounters() {
        initComponents();
        setLocationRelativeTo(null);
        formatter = new SimpleDateFormat("yyyy-M-dd");
        MainJFrame.defaultSearchText(txtSearch, "Search by city or community");
        validations = new Validations();
        populateTable();
        originalTableModel = (Vector) ((DefaultTableModel) tblDetails.getModel()).getDataVector().clone();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDate = new javax.swing.JLabel();
        lblDoctorRecord = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetails = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        txtPatient = new javax.swing.JTextField();
        txtEncounterId = new javax.swing.JTextField();
        lblCommunity = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        valDate = new javax.swing.JLabel();
        btn_create = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        lblCommunity1 = new javax.swing.JLabel();
        lblCommunity3 = new javax.swing.JLabel();
        lblCommunity4 = new javax.swing.JLabel();
        lblCommunity5 = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        txtPulseRate = new javax.swing.JTextField();
        txtTemperature = new javax.swing.JTextField();
        txtBreathing = new javax.swing.JTextField();
        valBloodPressure = new javax.swing.JLabel();
        valPulse = new javax.swing.JLabel();
        valTemperature = new javax.swing.JLabel();
        valBreathing = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDate.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 18)); // NOI18N
        lblDate.setText("Date :");

        lblDoctorRecord.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 24)); // NOI18N
        lblDoctorRecord.setText("Patients & Encounters");

        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Encounter ID", "Date", "Patient", "Patient ID", "object", "vs_object"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetails);
        if (tblDetails.getColumnModel().getColumnCount() > 0) {
            tblDetails.getColumnModel().getColumn(3).setMinWidth(0);
            tblDetails.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblDetails.getColumnModel().getColumn(3).setMaxWidth(0);
            tblDetails.getColumnModel().getColumn(4).setMinWidth(0);
            tblDetails.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblDetails.getColumnModel().getColumn(4).setMaxWidth(0);
            tblDetails.getColumnModel().getColumn(5).setMinWidth(0);
            tblDetails.getColumnModel().getColumn(5).setPreferredWidth(0);
            tblDetails.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtPatient.setEditable(false);

        txtEncounterId.setEditable(false);

        lblCommunity.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 18)); // NOI18N
        lblCommunity.setText("Patient :");

        lblCity.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 18)); // NOI18N
        lblCity.setText("Encounter ID :");

        valDate.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        valDate.setForeground(new java.awt.Color(255, 0, 0));

        btn_create.setText("Create");
        btn_create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_createActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblCommunity1.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 18)); // NOI18N
        lblCommunity1.setText("Blood Pressure :");

        lblCommunity3.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 18)); // NOI18N
        lblCommunity3.setText("Pluse Rate :");

        lblCommunity4.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 18)); // NOI18N
        lblCommunity4.setText("Temperature :");

        lblCommunity5.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 18)); // NOI18N
        lblCommunity5.setText("Breathing :");

        txtBloodPressure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBloodPressureKeyReleased(evt);
            }
        });

        txtPulseRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPulseRateKeyReleased(evt);
            }
        });

        txtTemperature.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTemperatureKeyReleased(evt);
            }
        });

        txtBreathing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBreathingKeyReleased(evt);
            }
        });

        valBloodPressure.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        valBloodPressure.setForeground(new java.awt.Color(255, 0, 0));

        valPulse.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        valPulse.setForeground(new java.awt.Color(255, 0, 0));

        valTemperature.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        valTemperature.setForeground(new java.awt.Color(255, 0, 0));

        valBreathing.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        valBreathing.setForeground(new java.awt.Color(255, 0, 0));

        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });
        txtDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDateKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDoctorRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblCommunity1)
                        .addComponent(lblCommunity)
                        .addComponent(lblCity)
                        .addComponent(lblDate)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(133, 133, 133))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtEncounterId, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(btn_create, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCommunity4)
                                    .addComponent(lblCommunity3)
                                    .addComponent(lblCommunity5))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBreathing, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(valDate, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valPulse, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valBreathing, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoctorRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtEncounterId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCity))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_create)
                        .addComponent(btnLogout)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCommunity)
                    .addComponent(txtPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valDate, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCommunity1)
                        .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(valBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCommunity3)
                        .addComponent(txtPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(valPulse, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCommunity4)
                        .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(valTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCommunity5)
                        .addComponent(txtBreathing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(valBreathing, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(btnUpdate)
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetailsMouseClicked

        DefaultTableModel tblModel = (DefaultTableModel) tblDetails.getModel();

        // set data to textfield when raw is selected

        String tblEncounterID = tblModel.getValueAt(tblDetails.getSelectedRow(),0).toString();
        Date tblDate = (Date) tblModel.getValueAt(tblDetails.getSelectedRow(),1);
        String tblPatient = tblModel.getValueAt(tblDetails.getSelectedRow(),3).toString();
        VitalSigns v = (VitalSigns) tblModel.getValueAt(tblDetails.getSelectedRow(),5);

        LocalDate localDate = tblDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        txtEncounterId.setText(tblEncounterID);
        txtPatient.setText(tblPatient);
        txtDate.setText(tblDate.toString());
        txtPulseRate.setText(String.valueOf(v.getPulseRate()));
        txtBreathing.setText(String.valueOf(v.getRespiratoryRate()));
        txtBloodPressure.setText(v.getBloodPressure());
        txtTemperature.setText(String.valueOf(v.getBodyTemperature()));

        setValidationsNull();
    }//GEN-LAST:event_tblDetailsMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased

        setTextNull();
        setValidationsNull();
        DefaultTableModel model = (DefaultTableModel)tblDetails.getModel();

        model.setRowCount(0);
        for (Object rows : originalTableModel) {
            Vector rowVector = (Vector) rows;
            for (Object column : rowVector) {
                if (column.toString().toLowerCase().contains(txtSearch.getText())) {
                    //content found so adding to table
                    model.addRow(rowVector);
                    break;
                }
            }

        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectRowIndex = tblDetails.getSelectedRow();
        if (selectRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to update");
            return;
        }
        DefaultTableModel model = (DefaultTableModel)tblDetails.getModel();
        Encounter selectedDetails = (Encounter) model.getValueAt(selectRowIndex, 4);

        var valid = true;

        if (!this.validations.ValidateEmpty(txtDate.getText()) ) {
            valDate.setText("Date is required");
            valid = false;
        }
        if (txtDate.getText()!=null){
                      
            try {
                date = formatter.parse(txtDate.getText());
                
            } catch (ParseException ex) {
                valid=false;
                valDate.setText("Date should be in yyyy-mm-dd");
            }
        }
        
        if (!this.validations.ValidateBloodPressure(txtBloodPressure.getText()) ) {
            valBloodPressure.setText("Please enter valid value");
            valid = false;
        }
        
        if (!this.validations.ValidateInt(txtPulseRate.getText()) ) {
            valPulse.setText("Please enter valid value");
            valid = false;
        }
        
        if (!this.validations.ValidateInt(txtBreathing.getText()) ) {
            valBreathing.setText("Please enter valid value");
            valid = false;
        }
        
        if (!this.validations.ValidateFloat(txtTemperature.getText()) ) {
            valTemperature.setText("Please enter valid value");
            valid = false;
        }

        //
        if (valid) {

            selectedDetails.setDate(date);
            selectedDetails.getVitalSigns().setBloodPressure(txtBloodPressure.getText());
            selectedDetails.getVitalSigns().setBodyTemperature(Float.parseFloat(txtTemperature.getText()));
            selectedDetails.getVitalSigns().setPulseRate(Integer.parseInt(txtPulseRate.getText()));
            selectedDetails.getVitalSigns().setRespiratoryRate(Integer.parseInt(txtBreathing.getText()));

            JOptionPane.showMessageDialog(this, "Encounter details Updated");
            setTextNull();
            setValidationsNull();
            populateTable();

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btn_createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_createActionPerformed

        this.dispose();
        CreateEncounter adminArea = new CreateEncounter();
        adminArea.setVisible(true);
    }//GEN-LAST:event_btn_createActionPerformed
/*
    private void datePickerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datePickerKeyReleased
        if (!this.validations.ValidateEmpty(datePicker.getDateStringOrEmptyString()) ) {
            valDate.setText("Date of joining is required");
        }
        else {
            valDate.setText(null);
        }
    }//GEN-LAST:event_datePickerKeyReleased
*/
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        MainJFrame.loginSession.setObject(null);
        this.dispose();
        new MainJFrame().setVisible(true);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void txtBloodPressureKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBloodPressureKeyReleased
        if (!this.validations.ValidateBloodPressure(txtBloodPressure.getText()) ) {
            valBloodPressure.setText("Please enter valid value");
        }
        else {
            valBloodPressure.setText(null);
        }
    }//GEN-LAST:event_txtBloodPressureKeyReleased

    private void txtPulseRateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPulseRateKeyReleased
        if (!this.validations.ValidateInt(txtPulseRate.getText()) ) {
            valPulse.setText("Please enter valid value");
        }
        else {
            valPulse.setText(null);
        }
    }//GEN-LAST:event_txtPulseRateKeyReleased

    private void txtBreathingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBreathingKeyReleased
        if (!this.validations.ValidateInt(txtBreathing.getText()) ) {
            valBreathing.setText("Please enter valid value");
        }
        else {
            valBreathing.setText(null);
        }
    }//GEN-LAST:event_txtBreathingKeyReleased

    private void txtTemperatureKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTemperatureKeyReleased
        if (!this.validations.ValidateFloat(txtTemperature.getText()) ) {
            System.out.println(txtTemperature.getText());
            valTemperature.setText("Please enter valid value");
        }
        else {
            valTemperature.setText(null);
        }
    }//GEN-LAST:event_txtTemperatureKeyReleased

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void txtDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDateKeyReleased
        // TODO add your handling code here:
        if ((txtDate.getText() == null) ) {
            valDate.setText("Date is required");
        }
        try {
            date = formatter.parse(txtDate.getText());

        }
        catch (ParseException ex) {
            valid=false;
            valDate.setText("Date should be in yyyy-mm-dd");
        }
    }//GEN-LAST:event_txtDateKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorEncounters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorEncounters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorEncounters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorEncounters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorEncounters().setVisible(true);
            }
        });
    }
    
    private void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblDetails.getModel();
        model.setRowCount(0);
        Doctor doctor = (Doctor) MainJFrame.loginSession.getObject();
        
        for (Encounter c : doctor.getEncounterList()){
            Object[] row = new Object[6];
            row[0] = c.getEncounterID();
            row[1] = c.getDate();
            row[2] = c.getPatient().getName();
            row[3] = c.getPatient().getPatientID();
            row[4] = c;
            row[5] = c.getVitalSigns();
            
            model.addRow(row);
        }
    }
    
    private void setValidationsNull() {
        valDate.setText(null);
        valBloodPressure.setText(null);
        valBreathing.setText(null);
        valTemperature.setText(null);
        valPulse.setText(null);        
    }
    
    private void setTextNull() {
        txtBloodPressure.setText(null);
        txtBreathing.setText(null);
        txtEncounterId.setText(null);
        txtPatient.setText(null);
        txtPulseRate.setText(null);   
        txtTemperature.setText(null);
        txtDate.setText(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btn_create;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblCommunity1;
    private javax.swing.JLabel lblCommunity3;
    private javax.swing.JLabel lblCommunity4;
    private javax.swing.JLabel lblCommunity5;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDoctorRecord;
    private javax.swing.JTable tblDetails;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtBreathing;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtEncounterId;
    private javax.swing.JTextField txtPatient;
    private javax.swing.JTextField txtPulseRate;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTemperature;
    private javax.swing.JLabel valBloodPressure;
    private javax.swing.JLabel valBreathing;
    private javax.swing.JLabel valDate;
    private javax.swing.JLabel valPulse;
    private javax.swing.JLabel valTemperature;
    // End of variables declaration//GEN-END:variables
}
